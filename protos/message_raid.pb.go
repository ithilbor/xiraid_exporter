//*
// Messages to manage the RAID.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: message_raid.proto

package xiraid_exporter

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// Create the RAID.
type RaidCreate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// The name of the RAID.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// *
	// The level of the RAID.
	Level string `protobuf:"bytes,2,opt,name=level,proto3" json:"level,omitempty"`
	// *
	// The list of block devices to create the RAID.
	Drives []string `protobuf:"bytes,3,rep,name=drives,proto3" json:"drives,omitempty"`
	// *
	// The number of drives for one RAID group of level 5, 6, or 7.3
	// of the appropriate RAID 50, 60, or 70.
	GroupSize *uint32 `protobuf:"varint,4,opt,name=group_size,json=groupSize,proto3,oneof" json:"group_size,omitempty"`
	// *
	// The number of syndromes M in the N+M RAID.
	SyndCnt *uint32 `protobuf:"varint,5,opt,name=synd_cnt,json=syndCnt,proto3,oneof" json:"synd_cnt,omitempty"`
	// *
	// Strip size in KiB.
	StripSize *uint32 `protobuf:"varint,6,opt,name=strip_size,json=stripSize,proto3,oneof" json:"strip_size,omitempty"`
	// *
	// RAID block size in bytes.
	BlockSize *uint32 `protobuf:"varint,7,opt,name=block_size,json=blockSize,proto3,oneof" json:"block_size,omitempty"`
	// *
	// Name of the spare pool to assign to the RAID.
	Sparepool *string `protobuf:"bytes,8,opt,name=sparepool,proto3,oneof" json:"sparepool,omitempty"`
	// *
	// Initialization priority in percent.
	InitPrio *uint32 `protobuf:"varint,9,opt,name=init_prio,json=initPrio,proto3,oneof" json:"init_prio,omitempty"`
	// *
	// Reconstruction priority in percent.
	ReconPrio *uint32 `protobuf:"varint,10,opt,name=recon_prio,json=reconPrio,proto3,oneof" json:"recon_prio,omitempty"`
	// *
	// Restriping priority in percent.
	RestripePrio *uint32 `protobuf:"varint,11,opt,name=restripe_prio,json=restripePrio,proto3,oneof" json:"restripe_prio,omitempty"`
	// *
	// Enable (1) or disable (0) the resync function.
	ResyncEnabled *uint32 `protobuf:"varint,12,opt,name=resync_enabled,json=resyncEnabled,proto3,oneof" json:"resync_enabled,omitempty"`
	// *
	// Enable (1) or disable (0) the scheduling function.
	SchedEnabled *uint32 `protobuf:"varint,13,opt,name=sched_enabled,json=schedEnabled,proto3,oneof" json:"sched_enabled,omitempty"`
	// *
	// Enable (1) or disable (0) the merge read function.
	MergeReadEnabled *uint32 `protobuf:"varint,14,opt,name=merge_read_enabled,json=mergeReadEnabled,proto3,oneof" json:"merge_read_enabled,omitempty"`
	// *
	// Enable (1) or disable (0) the merge write function.
	MergeWriteEnabled *uint32 `protobuf:"varint,15,opt,name=merge_write_enabled,json=mergeWriteEnabled,proto3,oneof" json:"merge_write_enabled,omitempty"`
	// *
	// RAM usage limit in MiB.
	MemoryLimit *uint32 `protobuf:"varint,18,opt,name=memory_limit,json=memoryLimit,proto3,oneof" json:"memory_limit,omitempty"`
	// *
	// Set the limitation of requests per RAID. The 0 value disables the limitation.
	RequestLimit *uint32 `protobuf:"varint,19,opt,name=request_limit,json=requestLimit,proto3,oneof" json:"request_limit,omitempty"`
	// *
	// Allow overwriting metadata on disks.
	ForceMetadata *bool `protobuf:"varint,20,opt,name=force_metadata,json=forceMetadata,proto3,oneof" json:"force_metadata,omitempty"`
	// *
	// Maximum wait time (in microseconds) for stripe accumulation with "merge" enabled for read requests.
	MergeReadMax *uint32 `protobuf:"varint,24,opt,name=merge_read_max,json=mergeReadMax,proto3,oneof" json:"merge_read_max,omitempty"`
	// *
	// Wait time (in microseconds) between requests with "merge" enabled for read requests.
	MergeReadWait *uint32 `protobuf:"varint,25,opt,name=merge_read_wait,json=mergeReadWait,proto3,oneof" json:"merge_read_wait,omitempty"`
	// *
	// Maximum wait time (in microseconds) for stripe accumulation with "merge" enabled for write requests.
	MergeWriteMax *uint32 `protobuf:"varint,26,opt,name=merge_write_max,json=mergeWriteMax,proto3,oneof" json:"merge_write_max,omitempty"`
	// *
	// Wait time (in microseconds) between requests with "merge" enabled for write requests.
	MergeWriteWait *uint32 `protobuf:"varint,27,opt,name=merge_write_wait,json=mergeWriteWait,proto3,oneof" json:"merge_write_wait,omitempty"`
	// *
	// Set the CPU numbers on which the current RAID is allowed to run.
	CpuAllowed *string `protobuf:"bytes,28,opt,name=cpu_allowed,json=cpuAllowed,proto3,oneof" json:"cpu_allowed,omitempty"`
	// *
	// Enable (1) or disable (0) the adaptive merge write function.
	AdaptiveMerge *uint32 `protobuf:"varint,29,opt,name=adaptive_merge,json=adaptiveMerge,proto3,oneof" json:"adaptive_merge,omitempty"`
	// *
	// Adaptive merge parameter setting happens once at startup,
	// after completion parameters are set to found values and do not change anymore.
	SingleRun *bool `protobuf:"varint,30,opt,name=single_run,json=singleRun,proto3,oneof" json:"single_run,omitempty"`
	// *
	// Reserved memory pool in MiB.
	MemoryPrealloc *uint32 `protobuf:"varint,32,opt,name=memory_prealloc,json=memoryPrealloc,proto3,oneof" json:"memory_prealloc,omitempty"`
	// *
	// Force the command execution.
	Force         *bool `protobuf:"varint,100,opt,name=force,proto3,oneof" json:"force,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RaidCreate) Reset() {
	*x = RaidCreate{}
	mi := &file_message_raid_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaidCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaidCreate) ProtoMessage() {}

func (x *RaidCreate) ProtoReflect() protoreflect.Message {
	mi := &file_message_raid_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaidCreate.ProtoReflect.Descriptor instead.
func (*RaidCreate) Descriptor() ([]byte, []int) {
	return file_message_raid_proto_rawDescGZIP(), []int{0}
}

func (x *RaidCreate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RaidCreate) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *RaidCreate) GetDrives() []string {
	if x != nil {
		return x.Drives
	}
	return nil
}

func (x *RaidCreate) GetGroupSize() uint32 {
	if x != nil && x.GroupSize != nil {
		return *x.GroupSize
	}
	return 0
}

func (x *RaidCreate) GetSyndCnt() uint32 {
	if x != nil && x.SyndCnt != nil {
		return *x.SyndCnt
	}
	return 0
}

func (x *RaidCreate) GetStripSize() uint32 {
	if x != nil && x.StripSize != nil {
		return *x.StripSize
	}
	return 0
}

func (x *RaidCreate) GetBlockSize() uint32 {
	if x != nil && x.BlockSize != nil {
		return *x.BlockSize
	}
	return 0
}

func (x *RaidCreate) GetSparepool() string {
	if x != nil && x.Sparepool != nil {
		return *x.Sparepool
	}
	return ""
}

func (x *RaidCreate) GetInitPrio() uint32 {
	if x != nil && x.InitPrio != nil {
		return *x.InitPrio
	}
	return 0
}

func (x *RaidCreate) GetReconPrio() uint32 {
	if x != nil && x.ReconPrio != nil {
		return *x.ReconPrio
	}
	return 0
}

func (x *RaidCreate) GetRestripePrio() uint32 {
	if x != nil && x.RestripePrio != nil {
		return *x.RestripePrio
	}
	return 0
}

func (x *RaidCreate) GetResyncEnabled() uint32 {
	if x != nil && x.ResyncEnabled != nil {
		return *x.ResyncEnabled
	}
	return 0
}

func (x *RaidCreate) GetSchedEnabled() uint32 {
	if x != nil && x.SchedEnabled != nil {
		return *x.SchedEnabled
	}
	return 0
}

func (x *RaidCreate) GetMergeReadEnabled() uint32 {
	if x != nil && x.MergeReadEnabled != nil {
		return *x.MergeReadEnabled
	}
	return 0
}

func (x *RaidCreate) GetMergeWriteEnabled() uint32 {
	if x != nil && x.MergeWriteEnabled != nil {
		return *x.MergeWriteEnabled
	}
	return 0
}

func (x *RaidCreate) GetMemoryLimit() uint32 {
	if x != nil && x.MemoryLimit != nil {
		return *x.MemoryLimit
	}
	return 0
}

func (x *RaidCreate) GetRequestLimit() uint32 {
	if x != nil && x.RequestLimit != nil {
		return *x.RequestLimit
	}
	return 0
}

func (x *RaidCreate) GetForceMetadata() bool {
	if x != nil && x.ForceMetadata != nil {
		return *x.ForceMetadata
	}
	return false
}

func (x *RaidCreate) GetMergeReadMax() uint32 {
	if x != nil && x.MergeReadMax != nil {
		return *x.MergeReadMax
	}
	return 0
}

func (x *RaidCreate) GetMergeReadWait() uint32 {
	if x != nil && x.MergeReadWait != nil {
		return *x.MergeReadWait
	}
	return 0
}

func (x *RaidCreate) GetMergeWriteMax() uint32 {
	if x != nil && x.MergeWriteMax != nil {
		return *x.MergeWriteMax
	}
	return 0
}

func (x *RaidCreate) GetMergeWriteWait() uint32 {
	if x != nil && x.MergeWriteWait != nil {
		return *x.MergeWriteWait
	}
	return 0
}

func (x *RaidCreate) GetCpuAllowed() string {
	if x != nil && x.CpuAllowed != nil {
		return *x.CpuAllowed
	}
	return ""
}

func (x *RaidCreate) GetAdaptiveMerge() uint32 {
	if x != nil && x.AdaptiveMerge != nil {
		return *x.AdaptiveMerge
	}
	return 0
}

func (x *RaidCreate) GetSingleRun() bool {
	if x != nil && x.SingleRun != nil {
		return *x.SingleRun
	}
	return false
}

func (x *RaidCreate) GetMemoryPrealloc() uint32 {
	if x != nil && x.MemoryPrealloc != nil {
		return *x.MemoryPrealloc
	}
	return 0
}

func (x *RaidCreate) GetForce() bool {
	if x != nil && x.Force != nil {
		return *x.Force
	}
	return false
}

// *
// Delete the RAID without possibility to restore the RAID and data on it.
type RaidDestroy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// The name of the RAID.
	Name *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// *
	// Delete all the RAIDs.
	All *bool `protobuf:"varint,2,opt,name=all,proto3,oneof" json:"all,omitempty"`
	// *
	// The flag to confirm a command with major impact.
	Force         *bool `protobuf:"varint,3,opt,name=force,proto3,oneof" json:"force,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RaidDestroy) Reset() {
	*x = RaidDestroy{}
	mi := &file_message_raid_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaidDestroy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaidDestroy) ProtoMessage() {}

func (x *RaidDestroy) ProtoReflect() protoreflect.Message {
	mi := &file_message_raid_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaidDestroy.ProtoReflect.Descriptor instead.
func (*RaidDestroy) Descriptor() ([]byte, []int) {
	return file_message_raid_proto_rawDescGZIP(), []int{1}
}

func (x *RaidDestroy) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RaidDestroy) GetAll() bool {
	if x != nil && x.All != nil {
		return *x.All
	}
	return false
}

func (x *RaidDestroy) GetForce() bool {
	if x != nil && x.Force != nil {
		return *x.Force
	}
	return false
}

// *
// Import the RAID from drive metadata.
type RaidImportApply struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// UUID of the RAID.
	Uuid *string `protobuf:"bytes,1,opt,name=uuid,proto3,oneof" json:"uuid,omitempty"`
	// *
	// The new name for the RAID.
	NewName       *string `protobuf:"bytes,2,opt,name=new_name,json=newName,proto3,oneof" json:"new_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RaidImportApply) Reset() {
	*x = RaidImportApply{}
	mi := &file_message_raid_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaidImportApply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaidImportApply) ProtoMessage() {}

func (x *RaidImportApply) ProtoReflect() protoreflect.Message {
	mi := &file_message_raid_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaidImportApply.ProtoReflect.Descriptor instead.
func (*RaidImportApply) Descriptor() ([]byte, []int) {
	return file_message_raid_proto_rawDescGZIP(), []int{2}
}

func (x *RaidImportApply) GetUuid() string {
	if x != nil && x.Uuid != nil {
		return *x.Uuid
	}
	return ""
}

func (x *RaidImportApply) GetNewName() string {
	if x != nil && x.NewName != nil {
		return *x.NewName
	}
	return ""
}

// *
// Show info about the RAIDs that can be imported from the drives.
type RaidImportShow struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// The list of block devices to show the RAID info.
	Drives []string `protobuf:"bytes,1,rep,name=drives,proto3" json:"drives,omitempty"`
	// *
	// Show non-recoverable RAIDs in the import list.
	Offline       *bool `protobuf:"varint,2,opt,name=offline,proto3,oneof" json:"offline,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RaidImportShow) Reset() {
	*x = RaidImportShow{}
	mi := &file_message_raid_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaidImportShow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaidImportShow) ProtoMessage() {}

func (x *RaidImportShow) ProtoReflect() protoreflect.Message {
	mi := &file_message_raid_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaidImportShow.ProtoReflect.Descriptor instead.
func (*RaidImportShow) Descriptor() ([]byte, []int) {
	return file_message_raid_proto_rawDescGZIP(), []int{3}
}

func (x *RaidImportShow) GetDrives() []string {
	if x != nil {
		return x.Drives
	}
	return nil
}

func (x *RaidImportShow) GetOffline() bool {
	if x != nil && x.Offline != nil {
		return *x.Offline
	}
	return false
}

// *
// Start or continue the RAID initialization.
type RaidInitStart struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// The name of the RAID.
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RaidInitStart) Reset() {
	*x = RaidInitStart{}
	mi := &file_message_raid_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaidInitStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaidInitStart) ProtoMessage() {}

func (x *RaidInitStart) ProtoReflect() protoreflect.Message {
	mi := &file_message_raid_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaidInitStart.ProtoReflect.Descriptor instead.
func (*RaidInitStart) Descriptor() ([]byte, []int) {
	return file_message_raid_proto_rawDescGZIP(), []int{4}
}

func (x *RaidInitStart) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// *
// Stop the RAID initialization.
type RaidInitStop struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// The name of the RAID.
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RaidInitStop) Reset() {
	*x = RaidInitStop{}
	mi := &file_message_raid_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaidInitStop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaidInitStop) ProtoMessage() {}

func (x *RaidInitStop) ProtoReflect() protoreflect.Message {
	mi := &file_message_raid_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaidInitStop.ProtoReflect.Descriptor instead.
func (*RaidInitStop) Descriptor() ([]byte, []int) {
	return file_message_raid_proto_rawDescGZIP(), []int{5}
}

func (x *RaidInitStop) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// *
// Modify the parameters of the created RAID.
type RaidModify struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// The name of the RAID.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// *
	// Name of the spare pool to assign to the RAID.
	Sparepool *string `protobuf:"bytes,2,opt,name=sparepool,proto3,oneof" json:"sparepool,omitempty"`
	// *
	// Initialization priority in percent.
	InitPrio *uint32 `protobuf:"varint,3,opt,name=init_prio,json=initPrio,proto3,oneof" json:"init_prio,omitempty"`
	// *
	// Reconstruction priority in percent.
	ReconPrio *uint32 `protobuf:"varint,4,opt,name=recon_prio,json=reconPrio,proto3,oneof" json:"recon_prio,omitempty"`
	// *
	// Restriping priority in percent.
	RestripePrio *uint32 `protobuf:"varint,5,opt,name=restripe_prio,json=restripePrio,proto3,oneof" json:"restripe_prio,omitempty"`
	// *
	// Enable (1) or disable (0) the resync function.
	ResyncEnabled *uint32 `protobuf:"varint,6,opt,name=resync_enabled,json=resyncEnabled,proto3,oneof" json:"resync_enabled,omitempty"`
	// *
	// Enable (1) or disable (0) the scheduling function.
	SchedEnabled *uint32 `protobuf:"varint,7,opt,name=sched_enabled,json=schedEnabled,proto3,oneof" json:"sched_enabled,omitempty"`
	// *
	// Enable (1) or disable (0) the merge read function.
	MergeReadEnabled *uint32 `protobuf:"varint,8,opt,name=merge_read_enabled,json=mergeReadEnabled,proto3,oneof" json:"merge_read_enabled,omitempty"`
	// *
	// Enable (1) or disable (0) the merge write function.
	MergeWriteEnabled *uint32 `protobuf:"varint,9,opt,name=merge_write_enabled,json=mergeWriteEnabled,proto3,oneof" json:"merge_write_enabled,omitempty"`
	// *
	// RAM usage limit in MiB.
	MemoryLimit *uint32 `protobuf:"varint,12,opt,name=memory_limit,json=memoryLimit,proto3,oneof" json:"memory_limit,omitempty"`
	// *
	// Set the limitation of requests per RAID. The 0 value disables the limitation.
	RequestLimit *uint32 `protobuf:"varint,13,opt,name=request_limit,json=requestLimit,proto3,oneof" json:"request_limit,omitempty"`
	// *
	// Change RAID state to online if the RAID has unrecoverable sections.
	ForceOnline *bool `protobuf:"varint,14,opt,name=force_online,json=forceOnline,proto3,oneof" json:"force_online,omitempty"`
	// *
	// Force RAID re-initialization.
	ForceResync *bool `protobuf:"varint,15,opt,name=force_resync,json=forceResync,proto3,oneof" json:"force_resync,omitempty"`
	// *
	// The flag to confirm a command with major impact.
	Force *bool `protobuf:"varint,16,opt,name=force,proto3,oneof" json:"force,omitempty"`
	// *
	// Maximum wait time (in microseconds) for stripe accumulation with "merge" enabled for read requests.
	MergeReadMax *uint32 `protobuf:"varint,20,opt,name=merge_read_max,json=mergeReadMax,proto3,oneof" json:"merge_read_max,omitempty"`
	// *
	// Wait time (in microseconds) between requests with "merge" enabled for read requests.
	MergeReadWait *uint32 `protobuf:"varint,21,opt,name=merge_read_wait,json=mergeReadWait,proto3,oneof" json:"merge_read_wait,omitempty"`
	// *
	// Maximum wait time (in microseconds) for stripe accumulation with "merge" enabled for write requests.
	MergeWriteMax *uint32 `protobuf:"varint,22,opt,name=merge_write_max,json=mergeWriteMax,proto3,oneof" json:"merge_write_max,omitempty"`
	// *
	// Wait time (in microseconds) between requests with "merge" enabled for write requests.
	MergeWriteWait *uint32 `protobuf:"varint,23,opt,name=merge_write_wait,json=mergeWriteWait,proto3,oneof" json:"merge_write_wait,omitempty"`
	// *
	// Set the CPU numbers on which the current RAID is allowed to run.
	CpuAllowed *string `protobuf:"bytes,24,opt,name=cpu_allowed,json=cpuAllowed,proto3,oneof" json:"cpu_allowed,omitempty"`
	// *
	// Enable (1) or disable (0) the adaptive merge write function.
	AdaptiveMerge *uint32 `protobuf:"varint,25,opt,name=adaptive_merge,json=adaptiveMerge,proto3,oneof" json:"adaptive_merge,omitempty"`
	// *
	// Adaptive merge parameter setting happens once at startup,
	// after completion parameters are set to found values and do not change anymore.
	SingleRun *bool `protobuf:"varint,26,opt,name=single_run,json=singleRun,proto3,oneof" json:"single_run,omitempty"`
	// *
	// Reserved memory pool in MiB
	MemoryPrealloc *uint32 `protobuf:"varint,28,opt,name=memory_prealloc,json=memoryPrealloc,proto3,oneof" json:"memory_prealloc,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RaidModify) Reset() {
	*x = RaidModify{}
	mi := &file_message_raid_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaidModify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaidModify) ProtoMessage() {}

func (x *RaidModify) ProtoReflect() protoreflect.Message {
	mi := &file_message_raid_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaidModify.ProtoReflect.Descriptor instead.
func (*RaidModify) Descriptor() ([]byte, []int) {
	return file_message_raid_proto_rawDescGZIP(), []int{6}
}

func (x *RaidModify) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RaidModify) GetSparepool() string {
	if x != nil && x.Sparepool != nil {
		return *x.Sparepool
	}
	return ""
}

func (x *RaidModify) GetInitPrio() uint32 {
	if x != nil && x.InitPrio != nil {
		return *x.InitPrio
	}
	return 0
}

func (x *RaidModify) GetReconPrio() uint32 {
	if x != nil && x.ReconPrio != nil {
		return *x.ReconPrio
	}
	return 0
}

func (x *RaidModify) GetRestripePrio() uint32 {
	if x != nil && x.RestripePrio != nil {
		return *x.RestripePrio
	}
	return 0
}

func (x *RaidModify) GetResyncEnabled() uint32 {
	if x != nil && x.ResyncEnabled != nil {
		return *x.ResyncEnabled
	}
	return 0
}

func (x *RaidModify) GetSchedEnabled() uint32 {
	if x != nil && x.SchedEnabled != nil {
		return *x.SchedEnabled
	}
	return 0
}

func (x *RaidModify) GetMergeReadEnabled() uint32 {
	if x != nil && x.MergeReadEnabled != nil {
		return *x.MergeReadEnabled
	}
	return 0
}

func (x *RaidModify) GetMergeWriteEnabled() uint32 {
	if x != nil && x.MergeWriteEnabled != nil {
		return *x.MergeWriteEnabled
	}
	return 0
}

func (x *RaidModify) GetMemoryLimit() uint32 {
	if x != nil && x.MemoryLimit != nil {
		return *x.MemoryLimit
	}
	return 0
}

func (x *RaidModify) GetRequestLimit() uint32 {
	if x != nil && x.RequestLimit != nil {
		return *x.RequestLimit
	}
	return 0
}

func (x *RaidModify) GetForceOnline() bool {
	if x != nil && x.ForceOnline != nil {
		return *x.ForceOnline
	}
	return false
}

func (x *RaidModify) GetForceResync() bool {
	if x != nil && x.ForceResync != nil {
		return *x.ForceResync
	}
	return false
}

func (x *RaidModify) GetForce() bool {
	if x != nil && x.Force != nil {
		return *x.Force
	}
	return false
}

func (x *RaidModify) GetMergeReadMax() uint32 {
	if x != nil && x.MergeReadMax != nil {
		return *x.MergeReadMax
	}
	return 0
}

func (x *RaidModify) GetMergeReadWait() uint32 {
	if x != nil && x.MergeReadWait != nil {
		return *x.MergeReadWait
	}
	return 0
}

func (x *RaidModify) GetMergeWriteMax() uint32 {
	if x != nil && x.MergeWriteMax != nil {
		return *x.MergeWriteMax
	}
	return 0
}

func (x *RaidModify) GetMergeWriteWait() uint32 {
	if x != nil && x.MergeWriteWait != nil {
		return *x.MergeWriteWait
	}
	return 0
}

func (x *RaidModify) GetCpuAllowed() string {
	if x != nil && x.CpuAllowed != nil {
		return *x.CpuAllowed
	}
	return ""
}

func (x *RaidModify) GetAdaptiveMerge() uint32 {
	if x != nil && x.AdaptiveMerge != nil {
		return *x.AdaptiveMerge
	}
	return 0
}

func (x *RaidModify) GetSingleRun() bool {
	if x != nil && x.SingleRun != nil {
		return *x.SingleRun
	}
	return false
}

func (x *RaidModify) GetMemoryPrealloc() uint32 {
	if x != nil && x.MemoryPrealloc != nil {
		return *x.MemoryPrealloc
	}
	return 0
}

// *
// Start the RAID reconstruction.
type RaidReconStart struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// The name of the RAID.
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RaidReconStart) Reset() {
	*x = RaidReconStart{}
	mi := &file_message_raid_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaidReconStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaidReconStart) ProtoMessage() {}

func (x *RaidReconStart) ProtoReflect() protoreflect.Message {
	mi := &file_message_raid_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaidReconStart.ProtoReflect.Descriptor instead.
func (*RaidReconStart) Descriptor() ([]byte, []int) {
	return file_message_raid_proto_rawDescGZIP(), []int{7}
}

func (x *RaidReconStart) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// *
// Stop the RAID reconstruction.
type RaidReconStop struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// The name of the RAID.
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RaidReconStop) Reset() {
	*x = RaidReconStop{}
	mi := &file_message_raid_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaidReconStop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaidReconStop) ProtoMessage() {}

func (x *RaidReconStop) ProtoReflect() protoreflect.Message {
	mi := &file_message_raid_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaidReconStop.ProtoReflect.Descriptor instead.
func (*RaidReconStop) Descriptor() ([]byte, []int) {
	return file_message_raid_proto_rawDescGZIP(), []int{8}
}

func (x *RaidReconStop) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// *
// Replace or remove the drive from the RAID.
type RaidReplace struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// The name of the RAID.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// *
	// The number of the drive.
	Number uint32 `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	// *
	// The new block device.
	Drive         string `protobuf:"bytes,3,opt,name=drive,proto3" json:"drive,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RaidReplace) Reset() {
	*x = RaidReplace{}
	mi := &file_message_raid_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaidReplace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaidReplace) ProtoMessage() {}

func (x *RaidReplace) ProtoReflect() protoreflect.Message {
	mi := &file_message_raid_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaidReplace.ProtoReflect.Descriptor instead.
func (*RaidReplace) Descriptor() ([]byte, []int) {
	return file_message_raid_proto_rawDescGZIP(), []int{9}
}

func (x *RaidReplace) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RaidReplace) GetNumber() uint32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *RaidReplace) GetDrive() string {
	if x != nil {
		return x.Drive
	}
	return ""
}

// *
// Change the RAID size.
type RaidResize struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// The name of the RAID.
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RaidResize) Reset() {
	*x = RaidResize{}
	mi := &file_message_raid_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaidResize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaidResize) ProtoMessage() {}

func (x *RaidResize) ProtoReflect() protoreflect.Message {
	mi := &file_message_raid_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaidResize.ProtoReflect.Descriptor instead.
func (*RaidResize) Descriptor() ([]byte, []int) {
	return file_message_raid_proto_rawDescGZIP(), []int{10}
}

func (x *RaidResize) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// *
// Restore the RAID from the configuration file.
type RaidRestore struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// The name of the RAID.
	Name *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// *
	// Restore all available RAIDs.
	All           *bool `protobuf:"varint,2,opt,name=all,proto3,oneof" json:"all,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RaidRestore) Reset() {
	*x = RaidRestore{}
	mi := &file_message_raid_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaidRestore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaidRestore) ProtoMessage() {}

func (x *RaidRestore) ProtoReflect() protoreflect.Message {
	mi := &file_message_raid_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaidRestore.ProtoReflect.Descriptor instead.
func (*RaidRestore) Descriptor() ([]byte, []int) {
	return file_message_raid_proto_rawDescGZIP(), []int{11}
}

func (x *RaidRestore) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RaidRestore) GetAll() bool {
	if x != nil && x.All != nil {
		return *x.All
	}
	return false
}

// *
// Start the RAID restripe.
type RaidRestripeStart struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// The name of the RAID.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// *
	// The new level for the RAID.
	Level string `protobuf:"bytes,2,opt,name=level,proto3" json:"level,omitempty"`
	// *
	// The list of block devices to restripe the RAID.
	Drives []string `protobuf:"bytes,3,rep,name=drives,proto3" json:"drives,omitempty"`
	// *
	// The number of drives for one RAID group of level 5, 6, or 7.3
	// of the appropriate RAID 50, 60, or 70.
	GroupSize     *uint32 `protobuf:"varint,4,opt,name=group_size,json=groupSize,proto3,oneof" json:"group_size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RaidRestripeStart) Reset() {
	*x = RaidRestripeStart{}
	mi := &file_message_raid_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaidRestripeStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaidRestripeStart) ProtoMessage() {}

func (x *RaidRestripeStart) ProtoReflect() protoreflect.Message {
	mi := &file_message_raid_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaidRestripeStart.ProtoReflect.Descriptor instead.
func (*RaidRestripeStart) Descriptor() ([]byte, []int) {
	return file_message_raid_proto_rawDescGZIP(), []int{12}
}

func (x *RaidRestripeStart) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RaidRestripeStart) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *RaidRestripeStart) GetDrives() []string {
	if x != nil {
		return x.Drives
	}
	return nil
}

func (x *RaidRestripeStart) GetGroupSize() uint32 {
	if x != nil && x.GroupSize != nil {
		return *x.GroupSize
	}
	return 0
}

// *
// Continue the RAID restripe.
type RaidRestripeContinue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// The name of the RAID.
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RaidRestripeContinue) Reset() {
	*x = RaidRestripeContinue{}
	mi := &file_message_raid_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaidRestripeContinue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaidRestripeContinue) ProtoMessage() {}

func (x *RaidRestripeContinue) ProtoReflect() protoreflect.Message {
	mi := &file_message_raid_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaidRestripeContinue.ProtoReflect.Descriptor instead.
func (*RaidRestripeContinue) Descriptor() ([]byte, []int) {
	return file_message_raid_proto_rawDescGZIP(), []int{13}
}

func (x *RaidRestripeContinue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// *
// Pause the RAID restripe.
type RaidRestripeStop struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// The name of the RAID.
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RaidRestripeStop) Reset() {
	*x = RaidRestripeStop{}
	mi := &file_message_raid_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaidRestripeStop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaidRestripeStop) ProtoMessage() {}

func (x *RaidRestripeStop) ProtoReflect() protoreflect.Message {
	mi := &file_message_raid_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaidRestripeStop.ProtoReflect.Descriptor instead.
func (*RaidRestripeStop) Descriptor() ([]byte, []int) {
	return file_message_raid_proto_rawDescGZIP(), []int{14}
}

func (x *RaidRestripeStop) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// *
// Show info about the RAID.
type RaidShow struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// The name of the RAID.
	Name *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// *
	// Show RAIDs that were not unloaded by the raid unload command.
	Online *bool `protobuf:"varint,2,opt,name=online,proto3,oneof" json:"online,omitempty"`
	// *
	// Size units.
	Units *string `protobuf:"bytes,3,opt,name=units,proto3,oneof" json:"units,omitempty"`
	// *
	// Show extended output.
	Extended      *bool `protobuf:"varint,4,opt,name=extended,proto3,oneof" json:"extended,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RaidShow) Reset() {
	*x = RaidShow{}
	mi := &file_message_raid_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaidShow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaidShow) ProtoMessage() {}

func (x *RaidShow) ProtoReflect() protoreflect.Message {
	mi := &file_message_raid_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaidShow.ProtoReflect.Descriptor instead.
func (*RaidShow) Descriptor() ([]byte, []int) {
	return file_message_raid_proto_rawDescGZIP(), []int{15}
}

func (x *RaidShow) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RaidShow) GetOnline() bool {
	if x != nil && x.Online != nil {
		return *x.Online
	}
	return false
}

func (x *RaidShow) GetUnits() string {
	if x != nil && x.Units != nil {
		return *x.Units
	}
	return ""
}

func (x *RaidShow) GetExtended() bool {
	if x != nil && x.Extended != nil {
		return *x.Extended
	}
	return false
}

// *
// Remove (unload) the RAID with possibility to restore the RAID
// and save data on it.
type RaidUnload struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// The name of the RAID.
	Name *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// *
	// Unload all available RAIDs.
	All           *bool `protobuf:"varint,2,opt,name=all,proto3,oneof" json:"all,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RaidUnload) Reset() {
	*x = RaidUnload{}
	mi := &file_message_raid_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaidUnload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaidUnload) ProtoMessage() {}

func (x *RaidUnload) ProtoReflect() protoreflect.Message {
	mi := &file_message_raid_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaidUnload.ProtoReflect.Descriptor instead.
func (*RaidUnload) Descriptor() ([]byte, []int) {
	return file_message_raid_proto_rawDescGZIP(), []int{16}
}

func (x *RaidUnload) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RaidUnload) GetAll() bool {
	if x != nil && x.All != nil {
		return *x.All
	}
	return false
}

var File_message_raid_proto protoreflect.FileDescriptor

var file_message_raid_proto_rawDesc = string([]byte{
	0x0a, 0x12, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x69, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x78, 0x72, 0x61, 0x69, 0x64, 0x2e, 0x76, 0x32, 0x22, 0xec,
	0x0b, 0x0a, 0x0a, 0x52, 0x61, 0x69, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x73, 0x12,
	0x22, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x7a, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x79, 0x6e, 0x64, 0x5f, 0x63, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x07, 0x73, 0x79, 0x6e, 0x64, 0x43, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x70, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x09, 0x73, 0x74, 0x72, 0x69, 0x70,
	0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x09, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x73,
	0x70, 0x61, 0x72, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x09, 0x73, 0x70, 0x61, 0x72, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x06, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x50, 0x72, 0x69,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65,
	0x5f, 0x70, 0x72, 0x69, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x07, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x0e, 0x72, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x79, 0x6e, 0x63,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x09, 0x52, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x0a, 0x52, 0x10, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x0b, 0x52, 0x11, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x0c, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0d, 0x52, 0x0c, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0e, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x0f, 0x52, 0x0c, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x4d,
	0x61, 0x78, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x10,
	0x52, 0x0d, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x57, 0x61, 0x69, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x11, 0x52, 0x0d, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x88, 0x01, 0x01, 0x12,
	0x2d, 0x0a, 0x10, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x77,
	0x61, 0x69, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x12, 0x52, 0x0e, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x57, 0x61, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24,
	0x0a, 0x0b, 0x63, 0x70, 0x75, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x0a, 0x63, 0x70, 0x75, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x14, 0x52, 0x0d,
	0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x15, 0x52, 0x09, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x75,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x70,
	0x72, 0x65, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x16, 0x52,
	0x0e, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x65, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x17, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x73, 0x79, 0x6e, 0x64, 0x5f, 0x63, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x70, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x61, 0x72,
	0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x70,
	0x72, 0x69, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x5f, 0x70, 0x72,
	0x69, 0x6f, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x5f,
	0x70, 0x72, 0x69, 0x6f, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61,
	0x78, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x77, 0x61, 0x69, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x6e,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x4a, 0x04,
	0x08, 0x10, 0x10, 0x11, 0x4a, 0x04, 0x08, 0x11, 0x10, 0x12, 0x4a, 0x04, 0x08, 0x15, 0x10, 0x18,
	0x4a, 0x04, 0x08, 0x1f, 0x10, 0x20, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x77, 0x61,
	0x69, 0x74, 0x52, 0x09, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x22, 0x79, 0x0a,
	0x0b, 0x52, 0x61, 0x69, 0x64, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x12, 0x17, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x01, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x05, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x61, 0x6c, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0x60, 0x0a, 0x0f, 0x52, 0x61, 0x69, 0x64,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x17, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x53, 0x0a, 0x0e, 0x52, 0x61,
	0x69, 0x64, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x64, 0x72,
	0x69, 0x76, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x22,
	0x23, 0x0a, 0x0d, 0x52, 0x61, 0x69, 0x64, 0x49, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x22, 0x0a, 0x0c, 0x52, 0x61, 0x69, 0x64, 0x49, 0x6e, 0x69, 0x74,
	0x53, 0x74, 0x6f, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xab, 0x0a, 0x0a, 0x0a, 0x52, 0x61, 0x69,
	0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x09, 0x73,
	0x70, 0x61, 0x72, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x09, 0x73, 0x70, 0x61, 0x72, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x50, 0x72, 0x69,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65,
	0x5f, 0x70, 0x72, 0x69, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x0c, 0x72,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x0e, 0x72, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x79, 0x6e, 0x63,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x05, 0x52, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x06, 0x52, 0x10, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x13, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x07, 0x52, 0x11, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x08, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x0a, 0x52, 0x0b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f,
	0x72, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0b, 0x52, 0x0b,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0c, 0x52,
	0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x0d, 0x52, 0x0c, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x61,
	0x78, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0e, 0x52,
	0x0d, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x57, 0x61, 0x69, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x5f, 0x6d, 0x61, 0x78, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0f, 0x52, 0x0d, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x88, 0x01, 0x01, 0x12, 0x2d,
	0x0a, 0x10, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x77, 0x61,
	0x69, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x10, 0x52, 0x0e, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x57, 0x61, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a,
	0x0b, 0x63, 0x70, 0x75, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x11, 0x52, 0x0a, 0x63, 0x70, 0x75, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x6d, 0x65, 0x72, 0x67, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x12, 0x52, 0x0d, 0x61,
	0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x13, 0x52, 0x09, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x75, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72,
	0x65, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x14, 0x52, 0x0e,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x65, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x88, 0x01,
	0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x70, 0x61, 0x72, 0x65, 0x70, 0x6f, 0x6f, 0x6c, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x72, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f,
	0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x79, 0x6e, 0x63, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x6d, 0x61, 0x78, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x77, 0x61, 0x69,
	0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f,
	0x72, 0x75, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x70,
	0x72, 0x65, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b, 0x4a, 0x04, 0x08,
	0x0b, 0x10, 0x0c, 0x4a, 0x04, 0x08, 0x11, 0x10, 0x14, 0x4a, 0x04, 0x08, 0x1b, 0x10, 0x1c, 0x52,
	0x0a, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x52, 0x09, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x22, 0x24, 0x0a, 0x0e, 0x52, 0x61, 0x69, 0x64, 0x52, 0x65,
	0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x23, 0x0a, 0x0d,
	0x52, 0x61, 0x69, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x55, 0x0a, 0x0b, 0x52, 0x61, 0x69, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x72, 0x69,
	0x76, 0x65, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0x20, 0x0a, 0x0a, 0x52, 0x61, 0x69, 0x64,
	0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x54, 0x0a, 0x0b, 0x52, 0x61,
	0x69, 0x64, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x01, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x61, 0x6c, 0x6c, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04,
	0x22, 0x88, 0x01, 0x0a, 0x11, 0x52, 0x61, 0x69, 0x64, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x70,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x72, 0x69, 0x76, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x09,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x2a, 0x0a, 0x14, 0x52,
	0x61, 0x69, 0x64, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x26, 0x0a, 0x10, 0x52, 0x61, 0x69, 0x64, 0x52,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0xa7, 0x01, 0x0a, 0x08, 0x52, 0x61, 0x69, 0x64, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x17, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a,
	0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x03, 0x52, 0x08, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x22, 0x4d, 0x0a, 0x0a, 0x52, 0x61, 0x69,
	0x64, 0x55, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x15, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52,
	0x03, 0x61, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x61, 0x6c, 0x6c, 0x42, 0x25, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x74, 0x68, 0x69, 0x6c, 0x62, 0x6f, 0x72, 0x2f,
	0x78, 0x69, 0x72, 0x61, 0x69, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_message_raid_proto_rawDescOnce sync.Once
	file_message_raid_proto_rawDescData []byte
)

func file_message_raid_proto_rawDescGZIP() []byte {
	file_message_raid_proto_rawDescOnce.Do(func() {
		file_message_raid_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_message_raid_proto_rawDesc), len(file_message_raid_proto_rawDesc)))
	})
	return file_message_raid_proto_rawDescData
}

var file_message_raid_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_message_raid_proto_goTypes = []any{
	(*RaidCreate)(nil),           // 0: xraid.v2.RaidCreate
	(*RaidDestroy)(nil),          // 1: xraid.v2.RaidDestroy
	(*RaidImportApply)(nil),      // 2: xraid.v2.RaidImportApply
	(*RaidImportShow)(nil),       // 3: xraid.v2.RaidImportShow
	(*RaidInitStart)(nil),        // 4: xraid.v2.RaidInitStart
	(*RaidInitStop)(nil),         // 5: xraid.v2.RaidInitStop
	(*RaidModify)(nil),           // 6: xraid.v2.RaidModify
	(*RaidReconStart)(nil),       // 7: xraid.v2.RaidReconStart
	(*RaidReconStop)(nil),        // 8: xraid.v2.RaidReconStop
	(*RaidReplace)(nil),          // 9: xraid.v2.RaidReplace
	(*RaidResize)(nil),           // 10: xraid.v2.RaidResize
	(*RaidRestore)(nil),          // 11: xraid.v2.RaidRestore
	(*RaidRestripeStart)(nil),    // 12: xraid.v2.RaidRestripeStart
	(*RaidRestripeContinue)(nil), // 13: xraid.v2.RaidRestripeContinue
	(*RaidRestripeStop)(nil),     // 14: xraid.v2.RaidRestripeStop
	(*RaidShow)(nil),             // 15: xraid.v2.RaidShow
	(*RaidUnload)(nil),           // 16: xraid.v2.RaidUnload
}
var file_message_raid_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_message_raid_proto_init() }
func file_message_raid_proto_init() {
	if File_message_raid_proto != nil {
		return
	}
	file_message_raid_proto_msgTypes[0].OneofWrappers = []any{}
	file_message_raid_proto_msgTypes[1].OneofWrappers = []any{}
	file_message_raid_proto_msgTypes[2].OneofWrappers = []any{}
	file_message_raid_proto_msgTypes[3].OneofWrappers = []any{}
	file_message_raid_proto_msgTypes[6].OneofWrappers = []any{}
	file_message_raid_proto_msgTypes[11].OneofWrappers = []any{}
	file_message_raid_proto_msgTypes[12].OneofWrappers = []any{}
	file_message_raid_proto_msgTypes[15].OneofWrappers = []any{}
	file_message_raid_proto_msgTypes[16].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_message_raid_proto_rawDesc), len(file_message_raid_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_message_raid_proto_goTypes,
		DependencyIndexes: file_message_raid_proto_depIdxs,
		MessageInfos:      file_message_raid_proto_msgTypes,
	}.Build()
	File_message_raid_proto = out.File
	file_message_raid_proto_goTypes = nil
	file_message_raid_proto_depIdxs = nil
}
